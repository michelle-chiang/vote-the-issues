{"version":3,"sources":["components/Navigation.js","constants/routes.js","components/Header.js","constants/issues.js","components/IssueSelector.js","components/ChooseYourIssues.js","components/MakeYourPlan.js","components/ShareYourPledge.js","components/App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","Link","to","Header","activeRoute","this","props","className","React","Component","issueData","Category 1","Category 2","Category 3","IssueSelector","category","map","issue","i","key","name","onChange","controlFunc","value","checked","selectedOptions","indexOf","type","ChooseYourIssues","_this","src_components_Header","Object","keys","src_components_IssueSelector","update","getSelectedIssues","MakeYourPlan","ShareYourPledge","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","colorPalette","resolution","frameWidth","issues","length","updateCanvas","text","canvas","document","getElementById","concat","width","height","ctx","getContext","fillStyle","fillRect","font","context","x","y","maxWidth","lineHeight","words","split","line","n","testLine","measureText","fillText","wrapText","style","id","App","getIssueSelection","state","selectedIssues","handleIssueSelection","e","newSelectionArray","newSelection","target","filter","toConsumableArray","setState","_this2","BrowserRouter","components_Navigation","Redirect","from","exact","Route","path","render","components_ChooseYourIssues","assign","components_MakeYourPlan","components_ShareYourPledge","Boolean","window","location","hostname","match","ReactDOM","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56c1ae57.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as routes from '../constants/routes';\r\n\r\nconst Navigation = () =>\r\n    <div>\r\n        <ul>\r\n            <li><Link to={routes.CHOOSE_YOUR_ISSUES}>Choose your issues.</Link></li>\r\n            <li><Link to={routes.MAKE_YOUR_PLAN}>Make your plan.</Link></li>\r\n            <li><Link to={routes.SHARE_YOUR_PLEDGE}>Share your pledge.</Link></li>\r\n        </ul>\r\n        <span>#VoteTheIssues</span>\r\n    </div>\r\n\r\nexport default Navigation;\r\n","// TODO: ask Oliver if he wants a homepage\r\nexport const CHOOSE_YOUR_ISSUES = '/choose-your-issues';\r\nexport const MAKE_YOUR_PLAN = '/make-your-plan';\r\nexport const SHARE_YOUR_PLEDGE = '/share-your-pledge';","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        let activeRoute = this.props.activeRoute;\r\n        return (\r\n            <div className='header'>\r\n                <p className={activeRoute === 'choose-your-issues' ? 'active' : ''}>Choose your issues.</p>\r\n                <p className={activeRoute === 'make-your-plan' ? 'active' : ''}>Make your plan.</p>\r\n                <p className={activeRoute === 'share-your-pledge' ? 'active' : ''}>Share your pledge.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","const issueData = {\r\n    'Category 1': [\r\n        'description 1 that is really really long',\r\n        'description 2',\r\n        'description 3'\r\n    ],\r\n    'Category 2': [\r\n        'issue 1',\r\n        'issue 2',\r\n        'issue 3'\r\n    ],\r\n    'Category 3': [\r\n        'hi 1',\r\n        'hi 2',\r\n        'hi 3'\r\n    ]\r\n}\r\n\r\nexport default issueData;","import React from 'react';\r\n\r\nimport './IssueSelector.css';\r\n\r\nimport issueData from '../constants/issues';\r\n\r\nconst IssueSelector = (props) => (\r\n  <div className='issue-selector'>\r\n    <label className='category-label'>{props.category}</label>\r\n    <div className='checkbox-group'>\r\n      {issueData[props.category].map(function(issue, i) {\r\n        return (\r\n            <label key={issue} className='issue-label'>\r\n              <input\r\n                className='form-checkbox'\r\n                name={issue}\r\n                onChange={props.controlFunc}\r\n                value={issue}\r\n                checked={props.selectedOptions.indexOf(issue) > -1}\r\n                type='checkbox'\r\n              /> {issue}\r\n            </label>\r\n          );\r\n        })}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default IssueSelector;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Header from './Header';\r\nimport IssueSelector from './IssueSelector';\r\n\r\nimport issueData from '../constants/issues';\r\nimport * as routes from '../constants/routes';\r\n\r\n// helped by https://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/\r\nclass ChooseYourIssues extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header activeRoute='choose-your-issues' />\r\n                {Object.keys(issueData).map(category => {\r\n                    return (\r\n                        <IssueSelector \r\n                            key={category}\r\n                            category={category}\r\n                            controlFunc={this.props.update}\r\n                            selectedOptions={this.props.getSelectedIssues()}\r\n                        />\r\n                    );\r\n                })}\r\n                \r\n                <p><Link to={routes.MAKE_YOUR_PLAN}>Make your plan >>></Link></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChooseYourIssues;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Header from './Header';\r\n\r\nimport * as routes from '../constants/routes';\r\n\r\nclass MakeYourPlan extends React.Component {\r\n    render() {\r\n        return (\r\n            <div> \r\n                <Header activeRoute='make-your-plan' />\r\n                <p><Link to={routes.SHARE_YOUR_PLEDGE}>Share your pledge >>></Link></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MakeYourPlan;","import React from 'react';\r\n\r\nimport Header from './Header';\r\n\r\nclass ShareYourPledge extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.colorPalette = ['#5FD0D4', '#FD2E58', '#EFA93A', '#343D3A', '#F1E7DE',  '#EFA93A', '#343D3A', '#FD2E58'];\r\n        this.resolution = 1080;\r\n        this.frameWidth = '300px';\r\n    }\r\n    componentDidMount () {\r\n        const issues = this.props.getSelectedIssues();\r\n        for (let i = 0; i < issues.length; i++) {\r\n            this.updateCanvas(issues[i], i);\r\n        }\r\n    }\r\n    updateCanvas (text, i) {\r\n        // from https://www.html5canvastutorials.com/tutorials/html5-canvas-wrap-text-tutorial/\r\n        function wrapText(context, text, x, y, maxWidth, lineHeight) {\r\n            var words = text.split(' ');\r\n            var line = '';\r\n            for(var n = 0; n < words.length; n++) {\r\n                var testLine = line + words[n] + ' ';\r\n                var metrics = context.measureText(testLine);\r\n                var testWidth = metrics.width;\r\n                if (testWidth > maxWidth && n > 0) {\r\n                    context.fillText(line, x, y);\r\n                    line = words[n] + ' ';\r\n                    y += lineHeight;\r\n                } else {\r\n                    line = testLine;\r\n                }\r\n            }\r\n            context.fillText(line, x, y);\r\n        }\r\n          \r\n        // TODO: add highlights to text? https://stackoverflow.com/questions/18900117/write-text-on-canvas-with-background\r\n        // const colorIndex = (Math.floor(Math.random() * 10) + i) % this.colorPalette.length;\r\n\r\n        let canvas = document.getElementById(`issue_${i}`)\r\n        canvas.width = this.resolution;\r\n        canvas.height = this.resolution;\r\n\r\n        // Fill in background\r\n        let ctx = canvas.getContext(\"2d\");\r\n        ctx.fillStyle = this.colorPalette[i];\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        // Draw text\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = \"italic bold 80px Arial\";\r\n        const maxWidth = 900;\r\n        const lineHeight = 100;\r\n        const x = (canvas.width - maxWidth)/2;\r\n        const y = 200;\r\n        wrapText(ctx, text, x, y, maxWidth, lineHeight);\r\n\r\n        canvas.style.width = this.frameWidth;\r\n        canvas.style.height = this.frameWidth;\r\n        \r\n    }\r\n    render() {\r\n        const issues = this.props.getSelectedIssues();\r\n        return (\r\n            <div>\r\n                <Header activeRoute='share-your-pledge' />\r\n                <p>instructions here</p>\r\n                {issues.map(function(issue, i) {\r\n                    return <canvas key={i} id={`issue_${i}`}></canvas>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShareYourPledge;","// TODO: connect to Firebase Database\n// follow https://www.codementor.io/yurio/all-you-need-is-react-firebase-4v7g9p4kf\n// routing help from https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial/\n\nimport React, { Component } from 'react';\nimport { \n  Redirect,\n  BrowserRouter as Router, \n  Route \n} from 'react-router-dom';\n\nimport Navigation from './Navigation';\nimport ChooseYourIssues from './ChooseYourIssues';\nimport MakeYourPlan from './MakeYourPlan';\nimport ShareYourPledge from './ShareYourPledge';\n\nimport './App.css';\n\nimport * as routes from '../constants/routes';\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        selectedIssues: []\n          // selectedIssues: ['description 1 that is really really long', 'hi 1']\n      }\n  }\n  getIssueSelection = () => {\n    return this.state.selectedIssues;\n  }\n  handleIssueSelection = (e)  => {\n    const newSelection = e.target.value;\n    let newSelectionArray;\n    if (this.state.selectedIssues.indexOf(newSelection) > -1) {\n        newSelectionArray = this.state.selectedIssues.filter(x => x !== newSelection);\n    } else {\n        newSelectionArray = [...this.state.selectedIssues, newSelection];\n    }\n    this.setState({ selectedIssues: newSelectionArray });\n  }\n  render () {\n    return (\n      <Router>\n        <div>\n          {/* Display navigation menu */}\n          <Navigation />\n\n          {/* Set default home page to Choose Your Issues */}\n          <Redirect from='/' exact to={routes.CHOOSE_YOUR_ISSUES} />\n          \n          {/* Render pages as when routed to */}\n          <Route\n            exact path={routes.CHOOSE_YOUR_ISSUES}\n            render={(props) => <ChooseYourIssues {...props} \n              update={this.handleIssueSelection}\n              getSelectedIssues={this.getIssueSelection} />}\n          />\n          <Route\n            exact path={routes.MAKE_YOUR_PLAN}\n            render={(props) => <MakeYourPlan {...props} />}\n          />\n          <Route\n            exact path={routes.SHARE_YOUR_PLEDGE}\n            render={(props) => <ShareYourPledge {...props} \n              getSelectedIssues={this.getIssueSelection} />}\n          />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}